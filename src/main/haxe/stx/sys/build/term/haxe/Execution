package stx.build.term.haxe;

class Execution{
  static public function upply(path:Cluster<String>){
    //Parse source file
    final agenda = Agenda.lift(__.belay(Path.parse(__.bake().root.toString()).attempt(Raw._.toDirectory).map(
      (dir:Directory) -> dir.entry(Entry.make('stx','pml'))
    ).errate((e) -> (e:FsFailure))
     .arrange(
      __.arrange((arc:Archive) -> arc.val())
    ).errate(e -> (e:BuildFailure))
     .adjust(
      (str) -> {
        //Transform to Haxe tokens
        return __.pml().parseI()(str.reader())
                .toRes()
                .flat_map(
                  opt -> opt.fold(
                    ok -> __.accept(ok),
                    () -> __.reject(f -> f.of(E_Build_EmptyBuildFile))
                  )
                ).errate(e -> (e:BuildFailure))
                 .adjust(
                    r -> stx.build.term.haxe.Lexer.main().apply([r].reader()).toRes().errate(e -> (e:BuildFailure))
                 ).adjust(
                    opt -> opt.fold(
                      ok -> __.accept(ok),
                      () -> __.reject(f -> f.of(E_Build_EmptyBuildFile))
                    )
                 ).adjust(
                    x -> Interpreter.apply(x,path)
                 );
      }
    ).provide(__.asys().local())//Uses local Device
     .then(
      //Create HaxeProcessProxy
      Fletcher.Sync(
        (res:Res<Args,BuildFailure>) -> res.fold(
          ok -> HaxeProcessProxyCtr.make(ok.toArgs()).prj(),
          no -> Agenda.lift(__.ended(no)).prj()
        )
      )
     )));
    agenda.toExecute().environment(
      ()      -> {},
      report  -> report.raise()//throw error if exists
    ).submit();

  }
}